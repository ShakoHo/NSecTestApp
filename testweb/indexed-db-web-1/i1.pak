manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDU0MVowIwYJKoZIhvcNAQkEMRYEFJeJ/fpfR2QW8tb9wljK+fUc2TjYMA0GCSqGSIb3DQEBAQUABIIBANJBMiWcujr93ut/iPYIoLiJiNpgiB4rlj8XwpVesPZCkfZ0X5OD7CGMghGMeUC8n2TohhO0tJ5MrjJQxu952e1YAZuOTF6pds6XUZxOR1jya6AVMfcJKRdZXu7dZGwKOr7htSW2oHjgn8rHf3h/ZEsMfNSLSp85MPFboP0uXYQriGxeXL0y/Qf9kV1uAArovqy0Jl8t3uz+bS+7c9ZBIMtI9ba/jvr9vaEB6VBC1KJzJjySfiaXRaRW4SieF/wB9vF4kSdInhH3485mQjHgVYMnm1lBOo+7o+PHsv6NmWwSAZ0KIpb70oyLPHlqq4DPF9vbW3dmc+jljb/frvRc6M0=
--IVD5D91SH3
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "Q7rpWSeVf3GhDva7pODnr9shS+PNQGI5Quvxwos+6Ds="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--IVD5D91SH3
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--IVD5D91SH3
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDMzNlowIwYJKoZIhvcNAQkEMRYEFDmBchCmeshEC3b72zqlqAbjm/lwMA0GCSqGSIb3DQEBAQUABIIBALWC4UbxYws+d78qWAQN028UcZgn/YK0Y9um/xiYkTPvS6x0ir2OGRD7YlE5viac6AqREf7swLbBTJHa/YxpkoTeOpNJXfSQ3edlUYRSl+J71uRqHfAIKf1IDU9gOebaN/WMMwUUujCbLxNd0z+Bfe34yAUpJhcTMOlgq+/UsTHkme6JAOp/cKgBykpyvcrQpKpXA27fDOjQxYl9yqV2eMkJ7tIytqUSkY7COV+hHdoDPFfUvhpZUV9LqORMCOV7a/+jKGacVqxGJ0/nyYUJuIEVUdQ5LAsWXcdhAsPQM/nLLHihVvE5qBZMUKFCYSD3DJfd9e1oZE/jYYfM8sHBUmY=
--AQXFJ0BQK4
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "rth9ep5aAhTkO7S6VBvAzxgSUp98DoAI2RcENli4/L0="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--AQXFJ0BQK4
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--AQXFJ0BQK4
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDI1NFowIwYJKoZIhvcNAQkEMRYEFGvaFnwB9AhdunlKmHfgW1hNIr70MA0GCSqGSIb3DQEBAQUABIIBAMafQC+7hP6MHE/pElZqgYG3Na3k+6D9+UHSpZ5mjvkGJMZWW7it1XG81UDxNJuK39uUZtaEN5tVEJeOrRQqz3fSJh8T85Ph8eWSNvZzpXziq6kMGlyDEkp3OxB30pUIuC8ZFs2uz036TLNL/6kDeyiPfg9UhOGd3mIh/eP+JNjC5dCvi9QfJOfZYYu4YS1QPInxwHRM5AysHst6EUqcBOvXLCoLOX84bstqMkLQZiG8OfmbRrJSI/PWIVwb6x/MJJlegY3i5VzsQVsACEahkXFqTxmDY5QSnfJZktjIH82PPx7Fbll0uSMETLZ6n94DaQck7NCsfJy2hnCsMCGf9Pw=
--K5OVAPCGJI
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "IAJZ6YUKPY8iey5NG0eSF608EEiaQipPzEjntEslleg="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--K5OVAPCGJI
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--K5OVAPCGJI
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDA1NVowIwYJKoZIhvcNAQkEMRYEFLnd96FLD5LQGchjOP36GO35lGZsMA0GCSqGSIb3DQEBAQUABIIBALaPkoMjzdDPOdUvqeM41s94fzIzc/wr+CyKw+v5WjefHkF8x3Tq9FqEKStdzkM1SmoC2/TfpzuVDqTRe6dDZoTiGTdWpzGM6zglQcArM0JvGbdUoGvPwdZ+62r08gnO4yLV2JWHHVUugwuZf1mNOQmipNzR/Hs61mwQunHiwcCoA6iWggtvVm1IrnwDHwqo80+g+Grya0BmW947q+d2FU1NsP80O1BD/VTRbGeJKuSWchZm8o1qG74rrkRIjhyzWKO5tvMHCVgEtGs4Ucs3DuxyJRhFqpOH1qgJdi+/dwPwStz3CqArr2bKPLTDhCuovqIrO+IkyZX4DFB6ngVGNQY=
--PSPHO9QF75
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "M2Z1hCaevUy51xt6rDmL3uXZmTFEiiglZcz/JJz/xHU="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--PSPHO9QF75
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--PSPHO9QF75
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NTg0M1owIwYJKoZIhvcNAQkEMRYEFJc9lDhf82ZoQZffGNut3NsUyAZ2MA0GCSqGSIb3DQEBAQUABIIBABHvgXuZgOg7ODC/kHw0cwRdroHsWJjs89QPt7n2M3htWBTzkyNzzjzOK4oSTtRVUougtk8CzIsyceQD4XL2SKV1AhwwNy3M/4/T3QsbOqI+/HToxhmk513xYtmncGXmDNSwk+5hnZeVRW/N7c+TEnqCbvEvcxAL9DZC4fjArqMyNY+qXM4gAmaSzSS/Ge5T2NF512q2jx+PnYQmdKgUbZi0VO+0nDDaqO4yUDoZojv0BEO+MvJWSfzIA3Pwa6TWZMR3SVtOAq/WzdpI8gYMFyat0q+TSXiQYSzVWctBr+SYDXbQTa5IrZxirxyR0MDhNTw2j/p8WjjwGYguTUOTDY4=
--22X1190WQG
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "KvAES+EETk4CNMCNe+S6Q/Nz532DitZHouNNIWBDcaI="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--22X1190WQG
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--22X1190WQG
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NTgxN1owIwYJKoZIhvcNAQkEMRYEFHAHqojDMS0QuEKM+sxMBHTclHpaMA0GCSqGSIb3DQEBAQUABIIBAJ3XhNx/s7OExkON4boam0l8XFUtFh6R6zSDdf/gb/3FAfqlXz4ouPlg7ui9/su9dLAnI2hGq/qrdVJ4XRj8WgezBMYlf7mgdnBcCB5Ty+smL1f4lXUWt86xFpT4BcFbwIygR43COPMZ2cOh+P/D2jAXFo0SACY4S1d6DjobnSgdOW8BrpC6wfpq0pfOdI3WHzr4L2tQPv76ifOQcFKlPUUtCvUE99XNib5Pnar0xhkCDci9kAY1S/sQSj+ZIGN/XnbMLDViJJDvSw26s4w88334Kpu2zpSx1rXjLwY7xpe3keqPgFRtj4aULfOotp4d5rSJpM0kfNMH/Gt32Wd9m0M=
--WAHYBTMEY1
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "BLRMLBou1DXw81lljUQ10LI0JGUf02BErOm2T27qlBQ="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--WAHYBTMEY1
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--WAHYBTMEY1
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NTA1NFowIwYJKoZIhvcNAQkEMRYEFH3No9f9szsuDxtDnMm4WHlMDZ/pMA0GCSqGSIb3DQEBAQUABIIBAG1weNYM+ADRToVOSiS1tep6peUNaV4aLpe4xdZj9R5bXiX9UifiLOXVdyL7Dk837dVg4Ua5HYAnllwDRpz8ivXlKWlMGvm4gAiBKBi6QV0l58/LTiJJnKKImvsTQg2pZczSuWdGiu7jEVtf/iCFRt8o9bghil0NUWyeijDSaeNkERy+vl2KUtI0D9nZRLEwya7BlmusUOUBAANd43fp2f+n5XHzVQFs16DQl8LyuL2EKgxANRVigZ+6M9O+IOMTgVTVu9U+v+fVmSZ50qerkDeZfz5cQkzc1ic9pkITh07SaaAtYSlWC+RtsQB7fAw8voelNT3wpasmTHSj/dsmn+A=
--BTZTXTOQ11
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "m6arhbeCW+ozhqf6D9S126ma2qDvCHHLHsrV7HvMOiA="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--BTZTXTOQ11
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--BTZTXTOQ11
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDk0MFowIwYJKoZIhvcNAQkEMRYEFDvo0Eo06VyG/griuDqo+4jDn462MA0GCSqGSIb3DQEBAQUABIIBALeNB9HbOUnjdnRVNKmq2JIzdlIKXtMA6jYSNe978CuE+AxroMNaUv8GmEazc02d2jwfJaJMtCgf1PSFEixdWb8X1z8Vh+meG2FUv2w1QH5gzEX2TUj6WJnWU1AfsNzUYBjPyFgIs5+ZgALh7GHVrGL1OTg/HTjxYJ2WYXBHyfIgsfkb1Rsa7MJFV7+CngFdeCBl8Q+bP2xEcJd+deZiorVkAlh1OfO8EcXeRyzNbusg6anM5xE15dpXN01MtQOLbScJ/bR7luFxwgb0S6SRZKVYAbXjXtIp14ty0VRRv08wyQaZOxRpbwinA3LhvfXZ4xwFfrXral8YA2lPoKv1M1U=
--Z78PAUYYT6
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "FNQ/mTzwPtC827K0qfZ++Db6xcH0OmjTvFEzsc5lYbM="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--Z78PAUYYT6
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--Z78PAUYYT6
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDkzM1owIwYJKoZIhvcNAQkEMRYEFJSUkccbnzc93eb1RqFE5kBmE1vIMA0GCSqGSIb3DQEBAQUABIIBAIibUCyoEASBspTVz/oHt2MPI1/pZjwzIPlEfGitWEMyARIBhP7nXs1GvWkQscifVSRiC5U7HaoKrUt8hu4GnWGcKm+hAxIymcspQIQNbjkwFiJQ+N5wfVV6BIxPqvO9nEBgNjVa1aPFrxLF8psCoAsrdeqJpwjA5FagxBMi2WIGWOe3LohiaUdi3Gl539DQqfM2WnudSGCYbl3mBnURrWh5JP5uTQZMS5ytgyqH2RPOkvWQlbYuBXXqdQsmeEGb5OTZezw0BNbODohb3lov16jd6+2NibLG0KFz2lUWvm56j/MZP6LDGjTYj2r0Q91A1W+MFFIpO9GZ1TUf6GkN59A=
--Y59425ADZB
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "xpDJo1IDtgR2CJUFs6hkNmzugVmIhhdYxjtjFFmgaS8="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--Y59425ADZB
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--Y59425ADZB
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDEyMVowIwYJKoZIhvcNAQkEMRYEFNDHK+KWQ9hZ5CZt/dQOtUqoIPRqMA0GCSqGSIb3DQEBAQUABIIBAGMLfIK+W+lKHssyedVSTApGDWiXmQIgozsVQ4b+O3B1Sxaw9Tmi0xYONwuX37HgqG2gvOu4mmeisPfnFw+oA2dtFx8wcAN4tt+lDpERKNjN7uOyjlDzsBBLYXpFAUXS19yUtpsVsEZt8Musjq7zb89DAG+TNwL9P+O119p1aNDF5wBs75ktZ3lNKgG5tHy2rKsJ5O2OYjhLHnPP3otRLBXO/PrBsmiuM0rch1ryjdHpDZ1YOzgVdt4NAeIMsxMv3EBIfnGkDvhNXanrGVxw4XRv5CxqI/UERKqH9Pn1wz7rUYr1SA7rVCMp7KsxyGXDUhJIBsc4uRaYlopkEdkAy30=
--NKAEAO47SC
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "fY5+djnGTBsZ5Kkjmqzpg2nP/oa4ygDRdItAZp3ShtY="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--NKAEAO47SC
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--NKAEAO47SC
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDEwN1owIwYJKoZIhvcNAQkEMRYEFEXrWrsDo6fSe9pc1zvrYY06p6kaMA0GCSqGSIb3DQEBAQUABIIBABp0FQvBgMKJ5cS8YBYR03J2ogGWXfOFmbtqsgyp0EKehWpwC32tLBFOJa+1hnCFguAeV/6jFL5Svzr8YeXj2eXuyElMGYcIcW6yTjTZHAQZbUUF7EWLv8zsuxfkx7SaUzGVnY1Fo+YNsbtveVUwqLmkkppLKjXUtPKfJmC1kSl96KE1B6tXY/WS0ME4aiIeA05v/JdV7oLrvub13xAg4Uv1tcSa6/29MMM5740j1PIfy2WfCgXbPJK2Gho329aR29FMyr+7ZQV2N1XJe6jzmFS/rH9n3VqWvl+AFVVNiO1nK7CQKasd4yN+fQXEbg6htwT8dUWqFjGIr5mOn5OlRnM=
--KJAX23Z0QY
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "1Pi6HoEM+Aqns77GXMzi78TgLkNHAKOhmTGxgKc/znU="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--KJAX23Z0QY
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--KJAX23Z0QY
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjAzNDg1MlowIwYJKoZIhvcNAQkEMRYEFLvXhJy1NmCEAXHzNl1Uqlbio+QdMA0GCSqGSIb3DQEBAQUABIIBAMMrWGELtArEuqVWyFbTAv94dag5vkahmM8X+al8ryw1Vvwoyc+rI7AO67d5O2qojS21tKDRU552iGp+X0RCtZ/ed4mFIVccOxWLShL3Ya5pqUYjJlZNYKfqgHGLKSONsE0o1Xn612EHPbUu/Ulxo7OvDKMixUcrJJ0lhq32xcHWZzy2wic4suiMvZiQTasddLxGYll4O3ijWHTYqoLUeYNmjpy3NkoFBCknILJBjpxXlPZvLVUpekYHLSgs2Wm1AArAIP5yOw+OZR1Jg2fjXM0NvGBgBBM8WNNB910dMiedr2gQJmn+gOr+sXYxg6g0FMwlN/MGEWwpkQAAfSs4IE0=
--VM4NLGE8O5
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "eo4AdUDTRJvUX24abkGKQmEEPwveOG4qAVb8Nnr4mWM="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--VM4NLGE8O5
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--VM4NLGE8O5
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjAzNDc1OVowIwYJKoZIhvcNAQkEMRYEFGZbmAiM7w0ultnbHiFkzfLyhLnXMA0GCSqGSIb3DQEBAQUABIIBAMLUq+J5qDkNEe0PTZfCxEb3nqKM7DeC8FBHaO9Jr7SLYjBiuQpR42+0LfcwjQr6d24ZU8FdcVsGxlXKh0rmgdtkkdyBRDr26GNxhkT0u/huhHlT3BdSVKdemzxa/RoV8tBXeQihblmBimle8TIjZTNyFXIkmq7OvdO186UMuuzk0QrX04dRAokzuPNQzt6GgEsQJs/Gwf+hWVn2Gstd1D/j5PHxmKJ7cQBicud8/4wXY5Sj4sjPPV8m/YQmaljr8clIO+6N9P5mogmj3UMNycAOXYxQsukhbSJgU5dojLvQdQ+P8vSXe0MZq/5qrzypQ3/7hfIu+qLJyc6NZyjCAPs=
--DNLA5Z1K54
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "hBeWW8uGGX36CqgoeFcc8Ezng3wVkVpwPxUizXFcQHs="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--DNLA5Z1K54
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--DNLA5Z1K54
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyMzEwMzM1OVowIwYJKoZIhvcNAQkEMRYEFOsCIFnVzVy2T+ofr1Mt0P4XE6QsMA0GCSqGSIb3DQEBAQUABIIBAK3RvQ4AkdL62UrYF/d7gi6/QpbyBsmdOz2vgmJWAxMufF5WxURj0zQPj3+oHcrmZEVsHQ+QUkiD1f3BlLbByjRBdtF8w/zTaSjLLHSF7jzEygSWMtTdQGjaWrdGaezVNVwfkzgEeDTLkt2O8ZNee20mu7y4ll8UUsxcfTaBO+lbjLFQB9Ugt3/drNROZ80zHmQCAbaJ0toNy8RiXpb9Xp9n9E31uyDRIBczAaZQ6nDbjIUkzM7UZ6kY4yJILqO+QzAz/r6zQ0YGjCgiq7/wEzrQy91udypDnsDIJnVy++SU7apKMa907FYCZeFk8ce1sz81lDtO4x4WrfRSd7wXWqY=
--SY7KAV807S
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "+esGDAEZlZb+kDJr15/dB+OD9I9mt/d9CQ9ESNCUWZo="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--SY7KAV807S
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--SY7KAV807S
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyMzEwMDQxMFowIwYJKoZIhvcNAQkEMRYEFDvj2noblUCCm+GDN/I7NGTqLXu/MA0GCSqGSIb3DQEBAQUABIIBAFmPteVKQe5d06m1W+voPCL8WTOhThDVIsCkg8TAPBZ2R3zsrw+SvdKvoYLwYuBf/rXw971j+AetJKM8SA0/gkQEWrrcurFhCyo+R6iurdyC10PdrSxEFF9/Mygnta90672EBR/9o7QmEiiqYLPg5mt26M10DPZMmgE7CMLPJALdzTXQzjtKe/q3q7ib694sD3aAPkxJMoEWkSLklxshvtdqlSzOQutNca+kqDCd6aW5K6F0hBM8SQRyaOGvTawSt11cSAbMjon7k3Nfb1FvNcBi5R7PVer4TMLy1JdThKGbWL6LmcLeDvIpBlBifD8mWI1OWQ4bH1wUQBvku35hwUs=
--VYCUJP5D6E
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    },
    {
      "src": "i1.pak",
      "integrity": "pt7qujDjrsj77C8SEyGC3TI7R6+1SnJqh4HKo4J50UM="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--VYCUJP5D6E
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--VYCUJP5D6E
Content-Location: i1.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyMzA5NTk0MlowIwYJKoZIhvcNAQkEMRYEFAmMH+gU6gqvRplr73qoWvQUwdjiMA0GCSqGSIb3DQEBAQUABIIBADHPIe3zoGy++uejoVjbNUf3AU9giZE/ENfR6lkpKZUJUOsN8F2KZW1BiW7Yz57jR3GXgooyKhN7dTAjX81V2JqcBq+pj/RtOOmEtPcY1gvk7T4yaQ1cXe+1/RGR5yQhssWbMfoFbygpLCwodPgAaNGbRa7tW3h/kGmPVQocLPUfEBn6707bwH1KqxGkQreVGbXd1Esg5PvtDu9FjeD2cyRaKgLDRv2MqVClyr4h0q2LbO0pgV30cd75S4YPCRuSkbV1uPh7d/+LzC+DErX6KVGVv8eEBEefW0hCZjCw9VxcuUmx86WEU9+n+e+Yp9tyA2QX1ys6GBFuZDoTm3S+jnM=
--633254Y4OI
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_1",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 1",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "SGwBDLVpZX6j5v6rzOaYS++tzL/AHVEhinJZ7T2Eg6c="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "fr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "en-US": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ru": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "zh-TW": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "de": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "tr": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "it": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "ar": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "pt-BR": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    },
    "es": {
      "name": "indexedDBTests1",
      "description": "Web app indexedDBTests1"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--633254Y4OI
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 1</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--633254Y4OI--
--VYCUJP5D6E--
--SY7KAV807S--
--DNLA5Z1K54--
--VM4NLGE8O5--
--KJAX23Z0QY--
--NKAEAO47SC--
--Y59425ADZB--
--Z78PAUYYT6--
--BTZTXTOQ11--
--WAHYBTMEY1--
--22X1190WQG--
--PSPHO9QF75--
--K5OVAPCGJI--
--AQXFJ0BQK4--
--IVD5D91SH3--
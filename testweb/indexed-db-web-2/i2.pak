manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDU0MVowIwYJKoZIhvcNAQkEMRYEFK1L9mboQqBNg5gvy/9MDhvWowkUMA0GCSqGSIb3DQEBAQUABIIBANC3xky2augicpUCA+7/gVMm9fiBDQFDy8ZYKpVHmhksDOnaxbZGcOrl7mdQvRBqha4oZRv5IojVvZMgW2zAGmABTLXQ1UD2ocLuw8EctGjYcSP1zMvDGZ/L/+h5I4H/+fcigXrcyhGOj5Q7Iy/R4CdaXpy8m9h7y5fE6n4sO+0BGp5MMspEBamTceS/XM2NMNGlVH8HLc0NF2bNTFai7LxacZOY4ZUu84HMcOkIkrj211C6+FeLrFNov+GPkHJn9I0HhV8vnpagl5cbGOsCE5PjUXhruxy+wdT8uGUBL//m6iz1UyVOc9JrsjRRn0VFWRnFafN+3k7XiqSeWjcuID0=
--957U2G00BX
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "ODZhXTBkCbChBkkABozPgcsq9e1zUQ7Z4n6J4hz+wkk="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--957U2G00BX
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--957U2G00BX
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDMzNlowIwYJKoZIhvcNAQkEMRYEFL1vhFvYctlydOV0kgT5uPvkpZrlMA0GCSqGSIb3DQEBAQUABIIBADqGOJTAv3Xrh/R1OVGqhB8T0ewDupQKiImxQEjNQjXl78ROeV+SqpkmAHc33AGShmNStN8rnt7muNfvwS3oQ53vQeK+K2Aw3sMDNyQVKwyBs7zPvjZCvmhJ7SBCvbScegHyAkpoEeDNORwDFIjAhCbtacarLlbZjxT3FYchuE/vEN0cbxu8M2MbOu+6S6bJUD353jFCxDMFdL/cTJT3HucCI0IHlUCljOyoLyLiTSQh8lVerjX37AC9CJjwuUZfmE1SrG2oAHY4rlLuuCh5cQKPz8bZ8tm3/y66chtvwb9NoB7K2ThtW+8SyU9XZ93o2uVDzgUmO3WFP4voKINVX2Y=
--I5BAF8BF90
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "00rqgb6/0Uxv4HKA628+BMZz7q6kGN4VUZj3qN7aYRw="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--I5BAF8BF90
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--I5BAF8BF90
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDI1NFowIwYJKoZIhvcNAQkEMRYEFG+zP0qnU6yxLUUGpApH3Q39D2KuMA0GCSqGSIb3DQEBAQUABIIBAIT+OfO3yM7fKF0VHCCsa2UMNTmXYfhLnK6ZyaDk06AXx4pL13fpQVbUZ3XXTjkgSrVHE0LfaASSB3DnEaQfrcCYCPv1c2kxEs1XGsEx6q/43tQozBd2EL9WP0FknrNG8LF/rwMXBdTQt2ZWYfc52oxUre6YUejruumaCA2bgaFZVV817/va+vo3ijvV/KinH+xpfIHPj9kf27y3Z+Gys49BfZLR7vMFx1wvqSoy8ViHuke6OkfWOzkFn7ilBpd5dZgtG0ssxGVdW6EEBIGSUkNjtQaj/Ee1IMFEtGsr382igF9ZX7tjfkQQpo5jMcmqh6GecGMEXyThnO9suiGvKIY=
--3YDXQ63YLB
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "gumiHKZylXUAeLTjrEwG1FWsT5j3pQi36zinTzC2EWY="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--3YDXQ63YLB
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--3YDXQ63YLB
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA3NDA1NVowIwYJKoZIhvcNAQkEMRYEFJ4IMaMATJDrxiA9rvQE9wBXRl6CMA0GCSqGSIb3DQEBAQUABIIBACv05hA2WAl3gphpwFOBuEGcVC8eI15TeZI0vw4cwubBMwgN+D7vb6t2LW1/FqEfBkn09wg+Nldqz6SnorNZvMly3HyaZE9Dtx9W8qu35AFNBKwgl90KBrCjZPuOl3yxD9jcz2ho0BTiIkoOgSwXBkpWwlsG5YpZX/N4XOY7IogJ13CIUzcIF0kk/YBP4jekDrL8hI7cmS9qVT7F+wIvHqGqpyaW68MiKvwnBkA8CKBbI+N0jC1TDpAiTkSlxs/g6zcgbhRHIWp8RweXUmH8db/BoAP97+SsRL098rLHhlA2QWaX39EDNNVJRLIGv3RFSFIk742KvDbXwxaGpwST/x4=
--9GHNQJ2KIS
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "BCLV+mB+sM47/UvuINk/KGvSRu+Hx5fkPOyTFhhocks="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--9GHNQJ2KIS
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--9GHNQJ2KIS
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NTg0M1owIwYJKoZIhvcNAQkEMRYEFGUgMR9EGm1QnxK9kCctqv+/Ic2qMA0GCSqGSIb3DQEBAQUABIIBAGuo9Fsj2SsGNk31v1ubHMDOwL9bB7y4oFWGa65VrhqdN0wvS4vkHXMKm1fBkmOYU/kApexRAWzOBN3uddUHrs/8FNV5F94aurPxMH/gGQTID2sUR7+oDYr6pkbQNVAkbUbil1tCOnCVRTEupW0Ag/dAJLtlxvhapAnB9B84OKB1wrDHa0bu4F2yoPfb4uSWm4s7sZSQuzX25mMDYCNvBKMCp/wviaKSJAzzbOZJvgA+a3ud57nLtuJrRGMIequXaKmcZTw7jRcwxSN/XgY3dGvSGlQazxJKe81zvE4TORXwUPQOJ8iFmH/pM4dE6lI0GEW+rQjD6BTmCsuy7FSpeeI=
--K1XVXQ83KN
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "Feio7a7pS7CHJyITlDrjv9cN3wFs10i4KnERUAx/QW0="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--K1XVXQ83KN
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--K1XVXQ83KN
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NTgxN1owIwYJKoZIhvcNAQkEMRYEFExsMSLvjleactOy4rkPGnFuI41dMA0GCSqGSIb3DQEBAQUABIIBAAHDvrUrM9FI/8WPJRf9vmoWxagp0kOHnUIIagtl0Gle2BOi7N7CIjq4S3wjKY2QYiE9qFPw6pt//5nsFrWO/raqk+Ir46VK1CmUCXgGCEUZjV358kbF0CrpivhyonNzBnPAgYUQp0VKtXnzY+Nvk42jjZDmNu18eXsVY2u9w1RbdBU0nE5z3xOJAjd+ft0ZZNBg7JK6pRpoQBymn2zclZN+plQk58q7DVl6sbQ/pi85UI3w+KmurVdYDltUQEog9zdkCKsTUil4qR874oIoTqWXUPfE0vuVY1MqNqc4RhuaDv2FI1did/6NX+6rE/DrNnwnBdc61RWZq7BU+qaiiNs=
--PZJJUIL068
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "lQW8ZNsUnTrdoJDhZTGBTt3ZUJYKLImOYwRd7srULKw="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--PZJJUIL068
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--PZJJUIL068
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NTA1NFowIwYJKoZIhvcNAQkEMRYEFIZySXvcXuqwBhQlvyGmcxpc1xF+MA0GCSqGSIb3DQEBAQUABIIBADiX9Q5+Jw9HpQsVmxtwZCgcGiN+sHqfJvkf4MwRTvnNSmXDCaLYtLPC/c/RGcxNvVq+sGAGkyeETVlzxah+gPb5wgNFF03x9I1Z1xZAHKH2ezTm9q5yeXKFaNyGG43ZKpuv4r+NMXzeJwvwxOcDPOu4UPWE+1l2vRfrSdr+03WIxdPod4mfNuNLtv1LvdDfdEjkf98yG8BBBNFFhs4wMTGyf1JKa6CnFmL4JIeSxiTHXLxNqE9IIA0Uu7IZW8di1sJ2beE+f4upRElTntXNVqp5hyMlySrh/rG5Y3CaX8UF1c0H6gXa7mvHh75bekDScSCBCpjpQPTERK5KmKpfeOc=
--ZBH6XXLG9X
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "2nFLs85bMpNbK8xbN+Ye1HS3jeIgcjM3sK3bNpcb6Nw="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--ZBH6XXLG9X
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--ZBH6XXLG9X
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDk0MFowIwYJKoZIhvcNAQkEMRYEFHUJB99XqnuXMFSWZMaH0UjzyhspMA0GCSqGSIb3DQEBAQUABIIBAKFwGZ18LB/cwxjkJnXGBIMIhAmMbg38+Khb2+UGCx5qaCaAXUTJgTMikWfShuWPBGoxE7uvbM+OOTCZ2EZDL7fyGPjSDsNyaEmttb8qOoAXo48YBNzFYPuiqstefIPO8JEo746VlBzs+NMIXnBzWHc8LUP4wi+UuuMB0ID8xMnM+mk/KBptemYo2smPU0stV1x776UZkm/T9njBCYo8FHuBYwykW8QkwrZiUaU/iJg1MbHX4lenOEjzOBXPJZOcPK0/BDY+Ll7mcm2OfVdX6nuWZt3G2Yl+e3rub8ygBWxwGE2KpSPe8mqYfGRlBXx1SD71D4U0PGQ642T88n3JxlI=
--29B8Z62O3Q
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "eiRDmx1qy8GV8m+gMd6rWQ1M8xkSbZH7lG1Ir43F0to="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--29B8Z62O3Q
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--29B8Z62O3Q
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDkzM1owIwYJKoZIhvcNAQkEMRYEFEMFSUD5xOWX36GFBEjR1gUUWNfaMA0GCSqGSIb3DQEBAQUABIIBAA3NX2P9ENM1uQ5S9Ryq5Yylq9J1E8mFBpsdnrop6NdhhEJcSdPRzinO68ZkxLHJvReABsWeC9oCGZvwZXywWtkXF1nji2cLBw1iYCCldMriSqMPsGneOI7EDaqyAsQwWKKUbIQwZNkMQPHv/cK0YhEL44/KBSLmvbmm+jXEzPy3eHmusjUL2B//YmbBHZdZ5x6LczNEETKZYhr96O7KnaEBfvsaXGMithOOxcRzUAZvun31qpCfSF+cM/HuvNF2KX46eJe3iuFqO90NeaPZbLrKsvDmsFmN+OPh3P0gPj1Xh6HFEMAhys72AqdO3XW0YIhSKVEGmf7i5smpd6MyIWM=
--LJQ8Y8TS6A
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "kqQ4Bv2l3jciXI+cN9vepon2YBuafxa7AFeq8y5QhbU="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--LJQ8Y8TS6A
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--LJQ8Y8TS6A
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDEyMVowIwYJKoZIhvcNAQkEMRYEFDQ8F7rVoziCkYr8jJEHA3MshUszMA0GCSqGSIb3DQEBAQUABIIBAIiLdwD4F/YFF4RJ9cVlQzeDZ9Tc2k/0SmSC2pkt/a6d3exd2zgye93cFKt4dStIDIjEhM3nmSA+K3t/0joReZ4P7E6E6yFRH1BDjyDOApexixLT6C4vqDvgWyYQqvosz6Gln2uujpEGiKd1nxIq/Yebp+wDI6YUmbQE2igC+heMrK8SIKXX/Epv6TQ7aqy1OuBfcGw9JnckLs4hnWi1iwV74MYTbqdAoSsqEiE2sFedydMrAME2Ts9XxjJFrFVj+TSu4Ctm/keNo9X+YSOYoww9Gncb0PwgZBmRoEYh4h3qPTaw2SNQAWe0aYOD6h5u+O9JcnChFVUW58i6MRgyR/I=
--YFE4JLVC6G
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "yW8iq+aKYH5Z0lsrONgfuG0iF1mPQBWty0Ktp9hYYws="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--YFE4JLVC6G
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--YFE4JLVC6G
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjA2NDEwN1owIwYJKoZIhvcNAQkEMRYEFAD0f6OgIsZv8Tnk2Wf5wffaJv9VMA0GCSqGSIb3DQEBAQUABIIBAHRMS9pS5lK9uFdKqTqPN0v1vJwk7r0V/xl1gPFWGJK/NOe7ApyetW3+zBt4aIibhrr9Vr02sGjRgVdfBZ7WlY4FR+ek4xFZ8RZr8GgSqytbaQATLeWI8Mc9qYcgPS493XmbOAgjWHnYMz14ytF6MnKyWJSJ8VnovdLWFaykshGgILGVhzuniNAFKgnlRjif8buc392dFFIYbRN0sKMOw1s2pEq4XPNsoZMz5kdZ/J8RXmYLxgxktHgykhK4knKeZn7Yr/nNtY5FVw6GTdp8SI+BbWhtbg3eaWQzcKmXXLhfOn8DkurgoJf0Q6wDHapFtQCBYSbAlfVHFwA44a12TD4=
--BMFWTGVJ4C
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "hJ4ECFLsPksv1AyJymhjAsH/uCqQG8ZkCgbHnmcG3nA="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--BMFWTGVJ4C
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--BMFWTGVJ4C
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjAzNDg1MlowIwYJKoZIhvcNAQkEMRYEFATjSG60Nnc8W2kODPn0v0zMiaSYMA0GCSqGSIb3DQEBAQUABIIBACPYasliAd3p6PtetfeHAE+unA1k31eoIb6uTotoEXuZiz4Ub0Dk5X08Gh1vqhx9NqZDQD+xD1u1ttdzEJvQRFSfDB/xiWD7hmx27QTotTY0gHXZuHhi1jvgVJdWJcWKZxlVv8EyR0JSEK8L0g9cS1XWmozQVmWokUuvPPK7NOb7qFgW5UgL+MIW1JEzSMME4DZJuUre16htZXdhsWQg3xWuQPHGmYq7heddej63M+A7cfb7vZ4h00SgkkmlmvqoZlMhCxDbvjvxWelBIjeh4/RkP32idGTmMqX7bBuQHwbl1M7epk6zwvt1ndnHJFC5UNM73cHXYGGo9daJ7mSBy7g=
--F00Q31JAMG
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "q7evlu6d2HPWmWKDjvImLwR0N2nIDpZ+9oN5w1qiqgM="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--F00Q31JAMG
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--F00Q31JAMG
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyNjAzNDgwMFowIwYJKoZIhvcNAQkEMRYEFHVjIRZ6U4GtXruAS5RKJ8L3QXd8MA0GCSqGSIb3DQEBAQUABIIBAJnTiWQUSwbxsiJ/ugVQN3IrkCBeeCHIhtjZK8ZTSIofha8pdaMqa6j+BM391CryceyKCBYJ9UbabIJItGhaVgPNbio9Jz9pp92U+tcaatGQSReD2ZBBjhBdUciNLLKDA4+odDEzmY40CQLjkkwXOf5aQBbD0B9vJFOAcSVczklM7q6ZppaTM2WUfJghduHi3XZmhN4yxWP7kRiLQ8QNrBiPT7pVGIQN7/pbaLaSbq0yx4GmvgI1AOel8kyIhdzfguBEIvpAECMBCgNPWHbHZqgQgLHdmqjuXCNqZrSvkAX0WjVaUMV+XZTVBIrQprpDo02A/uKRIcDieyewouLfwyg=
--GBPDZGHZID
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "BgA4MHazJHOa2Q/kokHvjSRC7nun9RWtp2nPXvRzYgs="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--GBPDZGHZID
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--GBPDZGHZID
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyMzEwMzM1OVowIwYJKoZIhvcNAQkEMRYEFPnkPJ56/7/mnZuFZ7IQqW7O/2rkMA0GCSqGSIb3DQEBAQUABIIBAFCThpcAcjAZzP5noHHgIJ4VtAbm2R5MMVVpuHJ9la3+qespxNP2Y5cAJD2UICfkBiGJpZyQceYzIN7TqVLLIoZgNgf83EfApTWZBrEWfE8pJfBkeErw2tgdVgms2a2N9aQ26CmMp82fQ13eS3vlOWpFdT9UFKBUCa04oNjgkZYbZ9QKpDgAnctn9rTlUgYfpYPYwiQCURHaDOHNbaeZzj13W5B26g8WzHpRusjtipVvOSkZVlGtFv01JpMkJxIx9w6fTZrPTQtsazfDpUKhfXry3Bahg4XbdAuGO3blhMrVehvW8iVLFkPfA+CDCvUQf47JSWh+ADBxU5KNkdGYCJY=
--MDX3HCH8XB
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "69AYBO8abslqM13zF8O9ZgMapMlp93He2PBTL2hUQXc="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--MDX3HCH8XB
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--MDX3HCH8XB
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyMzEwMDQxMFowIwYJKoZIhvcNAQkEMRYEFAPRxVEFMYL8GaYB07uiHDQuk3Z8MA0GCSqGSIb3DQEBAQUABIIBADJN1vKC7544CcKzUfIeoWjN9xQpuRcYsslYdkM0rv0KKpdTUergv3lwTaimtMuGoqDZg/BDFx2suUrxV2zIeuSTWk8IPeWdiArHWOZ5++fh1IzI2vfx8yte+bzZw0mwceF5/8V6/RUVJe+xhzH7as+mREVt8rcr7N0uoUkwVTPqwtZDM4m5z5jIbqFkyvi/Jrrpq/ZEd1Qk4lyRZlYJmvKF6ZcVJMYUE/I+FxI3uTD8S3wGA0q7w88FikfwfjSHTO+vZ5LMhXtAZJmJfuYIXTIeSODdJbOuJOL6Gq8QUzYNC6fu6msHvcAvjhmJjikIz7wYK78G8fX9fHJJxN8jQcY=
--PAHOO72SOG
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    },
    {
      "src": "i2.pak",
      "integrity": "fcWq8qasQSjnR3H8yp6XaF+NAkaBGXnJe+LEpeT9sgI="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--PAHOO72SOG
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--PAHOO72SOG
Content-Location: i2.pak
Content-Type: text/plain

manifest-signature: MIIF1AYJKoZIhvcNAQcCoIIFxTCCBcECAQExCzAJBgUrDgMCGgUAMAsGCSqGSIb3DQEHAaCCA54wggOaMIICgqADAgECAgECMA0GCSqGSIb3DQEBCwUAMHMxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEkMCIGA1UEChMbRXhhbXBsZSBUcnVzdGVkIENvcnBvcmF0aW9uMRkwFwYDVQQDExBUcnVzdGVkIFZhbGlkIENBMB4XDTE1MTAyMTA5MDcyMFoXDTM1MTAyMTA5MDcyMFowdDELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGjAYBgNVBAMTEVRydXN0ZWQgQ29ycCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4pcO7lQtMox6cGHuALqA0MZ7uG/6fwgIkDNa/Xp1l/yKwri7MLO1/04BrxeC9N6Xa/GfBLenWxrh1OSqBm+qDGassG5m7jc152yZNXGX3vWR9f0WL5sSJgUPFpH4mgm7Bjaa9hzwCKd7zPjpwbvd968jtCDSzA4YsMcPyubvbmCPuQFEkgzWx4zHVqeBVqBao5dtNdo7x92oEYAeHm5weG+gR9h2pJgq5fKnH6EBLSGvIWoeYSuKAVob7oD/HVwQ6W5Sz5wvYl5DJgkDAPTU+HDD30QWku2AQfFuDC7NuLMTCa7jZq6qtS+F+6BfxBbdNiZLZTL80K689HewqFKGwwIDAQABozgwNjAMBgNVHRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMDMA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOCAQEA1uPEAb6WKwNETSQnaT1gKfpATwJXEDBpuQ4Wl6GVgi9afj18PPiiiqCc0BRstNDmkzp+69j0e1ax4xzkoWjK8kCo9Awx+kpui5J5eTUl9Z6/eTwXAfYpfh8psGNq3thN7fCnGb/YoZQzal2hvkZ0hIJd9m0ABMpn6ihbGq+pnmIFaIN8E9Sb5iCedU+Biq+i6LBRDG+UDEv6DM6SZ3IBl6ZIx46hkV76TqzTp3Jg0C8kXrbrDmBtKnVvFSwQIH7PgrxuRKLfqF+mXNmRniE9Sj27oa1H9MGvuKdbyDUIFnDZKhlCYZlHv/9HtxxoPeiyHgX1JHIxgIJ28Oq3TT+yTzGCAf4wggH6AgEBMHgwczELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MSQwIgYDVQQKExtFeGFtcGxlIFRydXN0ZWQgQ29ycG9yYXRpb24xGTAXBgNVBAMTEFRydXN0ZWQgVmFsaWQgQ0ECAQIwCQYFKw4DAhoFAKBdMBgGCSqGSIb3DQEJAzELBgkqhkiG9w0BBwEwHAYJKoZIhvcNAQkFMQ8XDTE1MTAyMzA5NTk0MlowIwYJKoZIhvcNAQkEMRYEFJ99etpg/eY0s/ULHXag0D+K5dX3MA0GCSqGSIb3DQEBAQUABIIBAIiD8esszQ4BN8enFAvIk9V57uwKNS6nYZ+Uq/jwHu7sEF3WPPYbXQ/Cxm+A9dLu3Qua//Z9NgK7oN2COWHK+D3OzwJAvSClslCzmKS1M5H5r38hr7CVekPfTE0W4MWjPJMXY2A+Ua81KUcOy6OYo5bn28X5sK5/tblCfgBUirHUgqUMOTG3lV/NoxUFPE8hdsgdTH9iFWtS02A2em6W2VhLw5b+afmFrZ/FnRtl7iuzQWpwEFX1zXm9d6xbgMWxY0J/KMwgJOsYTbd9MWLvV/2v72nKS8b3QBcV2gicQ9nqnizjinNxU5uWjvjcE0+5YTgqoU4RzAI4QgZQnT657Fc=
--6GYSEBU9BS
Content-Location: manifest.webapp
Content-Type: application/x-web-app-manifest+json

{
  "name": "indexedDB_Test_2",
  "default_locale": "en-US",
  "icons": {
    "128": "/style/icons/mic.png"
  },
  "description": "indexedDB Test 2",
  "moz-resources": [
    {
      "src": "index.html",
      "integrity": "g9FMJpkkjDs4UHbIXAs6amiPLaiSWAfJgzExTxdsA/w="
    }
  ],
  "version": "1.0",
  "launch_path": "indexedDB.html",
  "permissions": {
    "device-storage:sdcard": {
      "access": "readcreate"
    },
    "desktop-notification": {},
    "audio-capture": {},
    "contacts": {
      "access": "readcreate"
    },
    "settings": {
      "access": "readonly"
    },
    "storage": {},
    "systemXHR": {},
    "video-capture": {},
    "audio-channel-notification": {},
    "alarms": {},
    "tcp-socket": {}
  },
  "locales": {
    "el": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "fr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "en-US": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ru": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "zh-TW": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "de": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "tr": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "it": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "ar": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "pt-BR": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    },
    "es": {
      "name": "indexedDBTests2",
      "description": "Web app indexedDBTests2"
    }
  },
  "developer": {
    "url": "https://github.com/mozilla-b2g/gaia",
    "name": "The Gaia Team"
  }
}
--6GYSEBU9BS
Content-Location: index.html
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="Short example on using indexedDB with jquery mobile - last updated: May 2012">
  <meta name="author" content="Ido Green">

  <title>IndexedDB with JQM</title>
  <link rel="stylesheet" href="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.css" />
  <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
  <script src="http://code.jquery.com/mobile/1.1.1/jquery.mobile-1.1.1.min.js"></script>

  <!-- This shim will let your indexedDB code run in Safari and Opera as well! The nice & sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS, Android and other OS that got Opera
  -->
  <script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"></script>

  <script>
      var dbName = "jqm-todo";
      var dbVersion = 4;
      var todoDB = {};
      var indexedDB = window.indexedDB || window.webkitIndexedDB ||
        window.mozIndexedDB;

      if ('webkitIndexedDB' in window) {
        //   window.IDBTransaction = window.webkitIDBTransaction;
        window.IDBKeyRange = window.webkitIDBKeyRange;
      }

      todoDB.indexedDB = {};
      todoDB.indexedDB.db = null;

      $(document).bind('pageinit', function() {
        console.log("-- lets start the party --");
        todoDB.indexedDB.open();
        $("#addItem").click(function() {
          addTodo();
        });
      });

      todoDB.indexedDB.onerror = function(e) {
        console.log(e);
      };

      todoDB.indexedDB.open = function() {
        var request = indexedDB.open(dbName, dbVersion);

        request.onsuccess = function(e) {
          console.log ("success our DB: " + dbName + " is open and ready for work");
          todoDB.indexedDB.db = e.target.result;
          todoDB.indexedDB.getAllTodoItems();
        }

        request.onupgradeneeded = function(e) {
          todoDB.indexedDB.db = e.target.result;
          var db = todoDB.indexedDB.db;
          console.log ("Going to upgrade our DB from version: "+ e.oldVersion + " to " + e.newVersion);

            try {
              if (db.objectStoreNames && db.objectStoreNames.contains("todo")) {
                db.deleteObjectStore("todo");
              }
            }
            catch (err) {
              console.log("got err in objectStoreNames:" + err);
            }
            var store = db.createObjectStore("todo",
                {keyPath: "timeStamp"});
            console.log("-- onupgradeneeded store:"+ JSON.stringify(store));
          }

        request.onfailure = function(e) {
          console.error("could not open our DB! Err:"+e);
        }

        request.onerror = function(e) {
          console.error("Well... How should I put it? We have some issues with our DB! Err:"+e);
        }
      };

      todoDB.indexedDB.addTodo = function(todoText) {
        var db = todoDB.indexedDB.db;
        var trans = todoDB.indexedDB.db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var data = {
          "text": todoText,
          "timeStamp": new Date().getTime()
        };

        var request = store.put(data);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error Adding an item: ", e);
        };
      };

      todoDB.indexedDB.deleteTodo = function(id) {
        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readwrite");
        var store = trans.objectStore("todo");

        var request = store.delete(id);

        request.onsuccess = function(e) {
          todoDB.indexedDB.getAllTodoItems();
        };

        request.onerror = function(e) {
          console.error("Error deleteing: ", e);
        };
      };

      todoDB.indexedDB.getAllTodoItems = function() {
        var todos = document.getElementById("todoItems");
        todos.innerHTML = "";

        var db = todoDB.indexedDB.db;
        var trans = db.transaction("todo", "readonly");
        var store = trans.objectStore("todo");

        // Get everything in the store;
        var keyRange = IDBKeyRange.lowerBound(0);
        var cursorRequest = store.openCursor(keyRange);

        cursorRequest.onsuccess = function(e) {
          var result = e.target.result;
          if(!!result == false)
            return;

          renderTodo(result.value);
          result.continue();
        };

        cursorRequest.onerror = todoDB.indexedDB.onerror;
      };

      function renderTodo(row) {
        var todos = document.getElementById("todoItems");
        var li = document.createElement("li");
        var a = document.createElement("a");
        var t = document.createTextNode(row.text);

        a.addEventListener("click", function() {
          todoDB.indexedDB.deleteTodo(row.timeStamp);
        }, false);
        // some fun with jquery mobile data attributes
        a.setAttribute("href", "#");
        a.setAttribute("data-iconpos", "notext");
        a.setAttribute("data-role", "button");
        a.setAttribute("data-icon", "delete");
        a.setAttribute("data-inline", "true");

        li.appendChild(a);
        li.appendChild(t);
        todos.appendChild(li)
        // And lets create the new il item with its markup
        $("#todoItems").trigger('create');
      }

      // Add an item only if we have more then zero letters
      function addTodo() {
        var todo = document.getElementById("todo");
        if (todo.value.length > 0) {
          todoDB.indexedDB.addTodo(todo.value);
          todo.value = "";
        }
      }


      // use it in case you wish to work on specific 'set' of data
      function showAll() {
        document.getElementById("ourList").innerHTML = "" ;
        var request = window.indexedDB.open(dbName);
        request.onsuccess = function(event) {
          // Enumerate the entire object store.
          var db = todoDB.indexedDB.db;
          var trans = db.transaction("todo", "readonly");
          var request = trans.objectStore("todo").openCursor();
          var ul = document.createElement("ul");
          request.onsuccess = function(event) {
            var cursor = request.result || event.result;
            // If cursor is null then we've completed the enumeration.
            if (!cursor) {
              document.getElementById("ourList").appendChild(ul);
              return;
            }
            var li = document.createElement("li");
            li.textContent = "key: " + cursor.key + " => Todo text: " + cursor.value.text;
            ul.appendChild(li);
            cursor.continue();
          }
        }
      }
      </script>

</head>
<body>
  <div data-role="page" data-content-theme="e">

    <div data-role="header">
      <h1>IndexedDB with JQM test # 2</h1>
    </div>
    <!-- /header -->

    <div data-role="content">
      <p>
        This is a short example of inexedDB with jQueryMobile on a todo list app. Please open Chrome DevTools and/or FireBug in order to see all the log message and understand what is the process.
        <br/>
        Pssst... This shim <b>&lt;script src="http://axemclion.github.com/IndexedDBShim/dist/IndexedDBShim.min.js"&gt;&lt;/script&gt;</b> will let your indexedDB code run in Safari and Opera as well! The sweet thing is that you are now ready (with the same code) to built a mobile web app that will work both on iOS and Android.
      </p>
      <p>
        <input type="text" id="todo" name="todo" placeholder="What do you need to do?" />
        <input type="submit" value="Add Todo Item" id="addItem" />
      </p>

      <ul id="todoItems" data-role="listview" data-inset="true" data-filter="true"></ul>

    </div>
    <!-- /content -->

    <div data-role="footer">
      <div data-role="controlgroup" data-type="horizontal">
        <a href="http://greenido.wordpress.com" data-role="button" data-icon="check">Ido's blog</a>
        <a href="http://www.w3.org/TR/IndexedDB/" data-role="button" data-icon="gear">IndexedDB spec on w3c</a>
        <a href="https://github.com/greenido/WebSQL-to-IndexedDB-example" data-icon="plus" data-role="button">WebSQL to IndexedDB example on github</a>
      </div>

    </div> <!-- /footer -->
  </div>   <!-- /page -->

</body>
</html>
--6GYSEBU9BS--
--PAHOO72SOG--
--MDX3HCH8XB--
--GBPDZGHZID--
--F00Q31JAMG--
--BMFWTGVJ4C--
--YFE4JLVC6G--
--LJQ8Y8TS6A--
--29B8Z62O3Q--
--ZBH6XXLG9X--
--PZJJUIL068--
--K1XVXQ83KN--
--9GHNQJ2KIS--
--3YDXQ63YLB--
--I5BAF8BF90--
--957U2G00BX--